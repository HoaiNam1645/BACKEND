const ChatbotMessage = require("../models/chatbotMessage");
const Product = require("../models/Product");
const Category = require("../models/Category");
const User = require("../models/User");
const { STATUS_CODE } = require("../Helper/enums");
const { openai } = require("../config/openai");
// const mongoose = require("mongoose");

const getChatHistory = async (userId) => {
  try {
    // if (!mongoose.Types.ObjectId.isValid(userId)) {
    //   return {
    //     code: 400,
    //     success: false,
    //     message: "Invalid userId!",
    //   };
    // }
    let chat = await ChatbotMessage.findOne({
      userId: userId,
    });
    const user = await User.findById(userId);

    if (!chat) {
      chat = new ChatbotMessage({
        userId,
        messages: [
          {
            role: "system",
            content: `Xin ch√†o ${user.fullName}!! M√¨nh l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng b√°n h√†ng c√¥ng ngh·ªá. B·∫°n ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m c√¥ng ngh·ªá n√†o ·∫°? M√¨nh c√≥ th·ªÉ t∆∞ v·∫•n gi√∫p b·∫°n ch·ªçn l·ª±a ph√π h·ª£p nh·∫•t! Ho·∫∑c n·∫øu mu·ªën th√¨ b·∫°n c√≥ th·ªÉ t√°n g·∫´u v·ªõi m√¨nh... üòä`,
          },
        ],
      });
      await chat.save();
    }
    return { code: STATUS_CODE.SUCCESS, success: true, data: chat.messages };
  } catch (error) {
    return { code: STATUS_CODE.ERROR, success: false, message: error.message };
  }
};

const sendMessage = async (userId, userMessage) => {
  try {
    let chat = await ChatbotMessage.findOne({ userId });

    if (!chat) {
      chat = new ChatbotMessage({ userId, messages: [] });
    }

    const intentResponse = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content:
            "B·∫°n l√† m·ªôt m√¥ h√¨nh AI gi√∫p x√°c ƒë·ªãnh xem m·ªôt c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn t∆∞ v·∫•n s·∫£n ph·∫©m hay kh√¥ng. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn s·∫£n ph·∫©m, tr·∫£ l·ªùi 'product'. N·∫øu kh√¥ng, tr·∫£ l·ªùi 'general'.",
        },
        { role: "user", content: `C√¢u h·ªèi: ${userMessage}` },
      ],
      temperature: 0.3,
    });

    const intent =
      intentResponse?.choices?.[0]?.message?.content?.trim() || "general";

    let botResponse = "";
    let messages = chat.messages.slice(-6).map((msg) => ({
      role: msg.role,
      content: msg.content,
    }));

    if (chat.messages.length > 0) {
      messages.unshift({
        role: chat.messages[0].role,
        content: chat.messages[0].content,
      });
    }

    if (intent === "product") {
      const products = await Product.find()
        .populate("categoryId", "name")
        .lean();
      const categories = await Category.find().lean();

      const categoryList = categories.map((c) => `- ${c.name}`).join("<br>");

      const productList = products
        .map(
          (p) =>
            `<a href="/products/${p._id}" target="_blank">üõí <strong>${
              p.name
            }</strong></a> (Danh m·ª•c: ${p.categoryId?.name || "Ch∆∞a c√≥"}): ${
              p.description
            } (Gi√°: ${p.price} VND, C√≤n: ${p.stock})`
        )
        .join("<br>");

      messages.unshift({
        role: "system",
        content:
          "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI c√≥ th·ªÉ t∆∞ v·∫•n s·∫£n ph·∫©m, gi√∫p kh√°ch h√†ng t√¨m ƒë√∫ng s·∫£n ph·∫©m. N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p, h√£y ƒë·ªÅ ngh·ªã kh√°ch h√†ng h·ªèi l·∫°i theo c√°ch kh√°c, ƒë·ª´ng l·∫∑p l·∫°i l·ªùi xin l·ªói nhi·ªÅu l·∫ßn.",
      });

      messages.push({
        role: "user",
        content: `Danh m·ª•c hi·ªán c√≥:<br>${categoryList}<br><br>S·∫£n ph·∫©m n·ªïi b·∫≠t:<br>${productList}<br><br>Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}"`,
      });
    } else {
      messages.unshift({
        role: "system",
        content:
          "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI c√≥ th·ªÉ tr√≤ chuy·ªán v√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng. Tr√°nh l·∫∑p l·∫°i l·ªùi xin l·ªói qu√° nhi·ªÅu l·∫ßn.",
      });

      messages.push({ role: "user", content: userMessage });
    }

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages,
      temperature: 0.8,
    });

    botResponse =
      response?.choices?.[0]?.message?.content?.trim() ||
      "T√¥i ƒëang x·ª≠ l√Ω th√¥ng tin, b·∫°n vui l√≤ng h·ªèi l·∫°i theo c√°ch kh√°c nh√©.";

    chat.messages.push({ role: "user", content: userMessage });
    chat.messages.push({ role: "system", content: botResponse });
    await chat.save();

    return {
      code: STATUS_CODE.SUCCESS,
      success: true,
      data: botResponse,
    };
  } catch (error) {
    return { code: STATUS_CODE.ERROR, success: false, message: error.message };
  }
};

const deleteChatHistory = async (userId) => {
  try {
    const result = await ChatbotMessage.findOneAndDelete({
      userId: userId,
    });

    if (!result) {
      return {
        code: STATUS_CODE.BAD_REQUEST,
        success: false,
        message: "Chat history not found!",
      };
    }

    return {
      code: STATUS_CODE.SUCCESS,
      success: true,
      message: "Chat history has been cleared!",
    };
  } catch (error) {
    return { code: STATUS_CODE.ERROR, success: false, message: error.message };
  }
};

module.exports = {
  getChatHistory,
  sendMessage,
  deleteChatHistory,
};
