const ChatbotMessage = require("../models/chatbotMessage");
const Product = require("../models/Product");
const Category = require("../models/Category");
const User = require("../models/User");
const { STATUS_CODE } = require("../Helper/enums");
const { openai } = require("../config/openai");
// const mongoose = require("mongoose");

const getChatHistory = async (userId) => {
  try {
    // if (!mongoose.Types.ObjectId.isValid(userId)) {
    //   return {
    //     code: 400,
    //     success: false,
    //     message: "Invalid userId!",
    //   };
    // }
    let chat = await ChatbotMessage.findOne({
      userId: userId,
    });
    const user = await User.findById(userId);

    if (!chat) {
      chat = new ChatbotMessage({
        userId,
        messages: [
          {
            role: "system",
            content: `Xin ch√†o ${user.fullName}!! M√¨nh l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng b√°n h√†ng c√¥ng ngh·ªá. B·∫°n ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m c√¥ng ngh·ªá n√†o ·∫°? M√¨nh c√≥ th·ªÉ t∆∞ v·∫•n gi√∫p b·∫°n ch·ªçn l·ª±a ph√π h·ª£p nh·∫•t! Ho·∫∑c n·∫øu mu·ªën th√¨ b·∫°n c√≥ th·ªÉ t√°n g·∫´u v·ªõi m√¨nh... üòä`,
          },
        ],
      });
      await chat.save();
    }
    return { code: STATUS_CODE.SUCCESS, success: true, data: chat.messages };
  } catch (error) {
    return { code: STATUS_CODE.ERROR, success: false, message: error.message };
  }
};

const sendMessage = async (userId, userMessage) => {
  try {
    // T√¨m ho·∫∑c t·∫°o ƒëo·∫°n chat
    let chat = await ChatbotMessage.findOne({ userId });
    if (!chat) {
      chat = new ChatbotMessage({ userId, messages: [] });
    }

    // L∆∞u tin nh·∫Øn user m·ªõi nh·∫•t
    chat.messages.push({ role: "user", content: userMessage });

    // L·∫•y c√°c tin nh·∫Øn g·∫ßn nh·∫•t (t·ªëi ƒëa 6) + tin nh·∫Øn ƒë·∫ßu ti√™n
    let messages = chat.messages.slice(-6).map(({ role, content }) => ({ role, content }));
    if (chat.messages.length > 0) {
      messages.unshift({
        role: chat.messages[0].role,
        content: chat.messages[0].content,
      });
    }

    // L·∫•y to√†n b·ªô n·ªôi dung user ƒë√£ nh·∫Øn
    const m2 = chat.messages
      .filter((msg) => msg.role === "user")
      .map((msg) => msg.content);

    // G·ªçi OpenAI ƒë·ªÉ x√°c ƒë·ªãnh intent
    const intentResponse = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content:
            "B·∫°n l√† m·ªôt m√¥ h√¨nh AI gi√∫p x√°c ƒë·ªãnh xem m·ªôt c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn t∆∞ v·∫•n s·∫£n ph·∫©m hay kh√¥ng. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn s·∫£n ph·∫©m, tr·∫£ l·ªùi 'product'. N·∫øu kh√¥ng, tr·∫£ l·ªùi 'general'.",
        },
        { role: "user", content: m2.join("\n") },
      ],
      temperature: 0.3,
    });

    const intent =
      intentResponse?.choices?.[0]?.message?.content?.trim().toLowerCase() || "general";
    console.log(intent);
    // T·∫°o prompt t√πy theo intent
    if (intent === "product") {
      const products = await Product.find({ stock: { $gt: 0 } })
        .populate("categoryId", "name")
        .lean();
      const categories = await Category.find().lean();

      const categoryList = categories.map((c) => `- ${c.name}`).join("<br>");
      const productList = products
        .map(
          (p) =>
            `<div class="product-item"><a href="/product-left-sidebar/${p._id}" target="_blank">üõí <strong>${p.name}</strong></a> (Danh m·ª•c: ${p.categoryId?.name || "Ch∆∞a c√≥"}): ${p.description} <b>(Gi√°: ${p.price} VND, C√≤n: ${p.stock})</b></div>`
        )
        .join("<br>");

      messages.unshift({
        role: "system",
        content: `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI t∆∞ v·∫•n s·∫£n ph·∫©m. 
        - ƒêo·∫°n vƒÉn b·∫£n tr·∫£ v·ªÅ ph·∫£i ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng b·∫±ng HTML.
        - Kh√¥ng d√πng th∆∞ vi·ªán, ch·ªâ d√πng css thu·∫ßn.
        - Gi·ªØ nguy√™n c√°c th·∫ª HTML nh∆∞ <div>, <a>, <strong>, class="product-item",... ƒë·ªÉ frontend √°p d·ª•ng CSS.
        - Kh√¥ng ƒë∆∞·ª£c d√πng markdown nh∆∞ [link](url).
        - Ch·ªâ tr·∫£ v·ªÅ c√°c s·∫£n ph·∫©m c√≥ li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√† c√°c s·∫£n ph·∫©m c√≤n h√†ng trong product list m√† user cung c·∫•p.`,
      });

      messages.push({
        role: "user",
        content: `Danh m·ª•c hi·ªán c√≥:<br>${categoryList}<br><br>S·∫£n ph·∫©m n·ªïi b·∫≠t:<br><div class="product-list">${productList}</div><br><br>Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}"`,
      });
    } else {
      messages.unshift({
        role: "system",
        content: `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªó tr·ª£ tr√≤ chuy·ªán. N·∫øu c√≥ hi·ªÉn th·ªã HTML (v√≠ d·ª• link s·∫£n ph·∫©m), lu√¥n gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng HTML.`,
      });

      messages.push({ role: "user", content: userMessage });
    }

    // G·ªçi OpenAI ƒë·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi cu·ªëi c√πng
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages,
      temperature: 0.8,
    });

    const botResponse =
      response?.choices?.[0]?.message?.content?.trim() ||
      "T√¥i ƒëang x·ª≠ l√Ω th√¥ng tin, b·∫°n vui l√≤ng h·ªèi l·∫°i theo c√°ch kh√°c nh√©.";

    // L∆∞u ph·∫£n h·ªìi v√†o chat
    chat.messages.push({ role: "system", content: botResponse });
    await chat.save();

    return {
      code: STATUS_CODE.SUCCESS,
      success: true,
      data: botResponse,
    };
  } catch (error) {
    console.error("sendMessage error:", error);
    return {
      code: STATUS_CODE.ERROR,
      success: false,
      message: error.message,
    };
  }
};




const deleteChatHistory = async (userId) => {
  try {
    const result = await ChatbotMessage.findOneAndDelete({
      userId: userId,
    });

    if (!result) {
      return {
        code: STATUS_CODE.BAD_REQUEST,
        success: false,
        message: "Chat history not found!",
      };
    }

    return {
      code: STATUS_CODE.SUCCESS,
      success: true,
      message: "Chat history has been cleared!",
    };
  } catch (error) {
    return { code: STATUS_CODE.ERROR, success: false, message: error.message };
  }
};

module.exports = {
  getChatHistory,
  sendMessage,
  deleteChatHistory,
};
